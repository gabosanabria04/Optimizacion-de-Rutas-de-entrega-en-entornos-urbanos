\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage{csquotes}
\usepackage{amsmath}
\usepackage{geometry}
\geometry{margin=4cm}
\usepackage{hyperref}
\usepackage{parskip}

\title{Bitácora 2}
\author{Paola Espinoza Hernández, C32715 \\ Gabriel Sanabria Alvarado, C27184}
\date{Junio, 2025}

\begin{document}

\maketitle
\newpage
\textbf{Repositorio:} \href{https://github.com/gabosanabria04/Optimizacion-de-Rutas-de-entrega-en-entornos-urbanos}{Optimización de rutas de entrega}

\section*{Introducción}
El crecimiento del comercio electrónico y los servicios logísticos ha provocado que la optimización de rutas de entrega se vuelva un factor fundamental para empresas de transporte y distribución. La eficiencia en el uso de vehículos, la reducción de costos operativos y la mejora en los tiempos de entrega son factores claves que inciden directamente en la rentabilidad y satisfacción del cliente.

Este proyecto tiene como objetivo desarrollar una solución computacional en Python que permita encontrar rutas de entrega óptimas para un conjunto de ubicaciones dentro de un entorno urbano. Se pretende enfatizar la minimización de las distancias recorridas por los vehículos, tomando en cuenta restricciones como número de puntos, capacidades o condiciones urbanas.

Para alcanzar este objetivo, se utilizan herramientas de análisis geoespacial como Geopy y Folium, además de algoritmos de optimización del módulo OR-Tools de Google, usualmente utilizado para resolver problemas clásicos como el Problema del Viajante (TSP) o el Problema de Ruteo de Vehículos (VRP) \cite{google2023}.

Este enfoque no solo ofrece una solución técnica eficiente, sino que también proporciona una plataforma extensible para analizar escenarios reales, tomar decisiones basadas en datos y mejorar la sostenibilidad del transporte urbano.

\newpage

\section*{Exploración}
Durante los últimos años se han desarrollado distintas investigaciones sobre optimización con Python, así como su implementación en rutas de entrega tanto para empresas como para planificación personal.

Un componente fundamental para el progreso de este proyecto es \textbf{OR-Tools} (Operations Research Tools) \cite{google2023}, una biblioteca de código abierto desarrollada por Google para resolver problemas de optimización combinatoria, como programación lineal, programación entera mixta, programación por restricciones y problemas de rutas. Un componente clave es \textit{CP-SAT solver}, el cual es un solucionador eficiente para problemas de satisfacción de restricciones y optimización discreta. También se incluye \textit{Routing Solver}, orientado a la resolución del problema del viajante y sus variantes, como múltiples vehículos y ventanas de tiempo.

OR-Tools se puede utilizar en varios lenguajes de programación, incluyendo Python, Java, C++ y .NET, y puede integrarse con servicios como Google Maps para obtener datos reales de distancia y tiempo, lo que la convierte en una herramienta poderosa para aplicaciones logísticas.


El artículo \textit{Planificación de Rutas en MIPYMES Integrando el Algoritmo del Agente Viajero con Google Maps, IA y Python: Un enfoque práctico}, publicado en la revista \textit{Arandu} de la Universidad Tecnológica Intercontinental (UTIC), presenta una solución innovadora para mejorar la eficiencia en la distribución de productos en micro, pequeñas y medianas empresas (MIPYMES), mediante la integración del algoritmo del agente viajero (TSP), herramientas de inteligencia artificial (IA), la API de Google Maps y Python \cite{munoz2024}.

El enfoque se centra en encontrar rutas óptimas que reduzcan la distancia y el tiempo de entrega, resolviendo el problema del viajante con datos geográficos en tiempo real proporcionados por Google Maps. Además, incorpora IA para adaptar rutas dinámicamente ante variables como tráfico, horarios y restricciones de entrega.

Los resultados demuestran que esta estrategia reduce significativamente los costos logísticos y mejora la puntualidad en las entregas, siendo una solución viable, económica y efectiva para MIPYMES que no cuentan con sistemas logísticos avanzados.


Un estudio importante es el de Johanna Ávalos Carbonell, titulado \textit{Uso del algoritmo de colonia de hormigas para optimizar rutas de entrega o transporte mediante Python}, el cual explica la importancia del algoritmo de colonia de hormigas en la solución de problemas de rutas \cite{castro2022}. Este algoritmo se basa en el comportamiento de las hormigas al buscar alimento, utilizando feromonas para optimizar el camino más corto entre el nido y la fuente de alimento.

El modelo presentado aborda el problema en el que un vendedor debe recorrer una serie de ciudades, comenzando y finalizando en la misma ciudad. Cada ciudad debe ser visitada solo una vez, y se busca la ruta más corta posible. Para resolverlo, se desarrolló una aplicación con el algoritmo de colonia de hormigas en Python, empleando la biblioteca PyQt5.


Además, se considera el trabajo de Boeing (2025), quien propone el uso de OSMnx para el modelado de redes urbanas complejas mediante datos de OpenStreetMap, ofreciendo herramientas útiles para construir y visualizar grafos urbanos reales en problemas de optimización de rutas \cite{boeing2025}.

Una biblioteca fundamental para la elaboración del proyecto es la llamada \textbf{NetworkX}. La cual ha emergido como una herramienta fundamental por su flexibilidad, facilidad de uso y amplia aplicabilidad. Desde su introducción, ha facilitado el trabajo de investigadores y profesionales que buscan explorar la estructura y dinámica de redes de manera accesible y poderosa \cite{hagberg2008}.

Una de las principales ventajas de NetworkX radica en su capacidad de \textit{representación flexible}, permitiendo modelar grafos dirigidos o no dirigidos, con nodos y aristas que pueden tener cualquier tipo de dato asociado. Esto posibilita incorporar atributos personalizados a cada componente de la red, como pesos, etiquetas o características contextuales \cite{scellato2012}. Además, la biblioteca incluye un conjunto robusto de \textit{algoritmos integrados} que facilitan el cálculo de métricas clave, tales como medidas de centralidad, coeficientes de clustering y métodos de detección de comunidades. Estas herramientas son esenciales para comprender las propiedades estructurales de los sistemas analizados \cite{newman2010}.

Otra ventaja relevante es su \textit{interoperabilidad} con otras bibliotecas científicas del ecosistema Python, como NumPy para cálculos numéricos y Matplotlib para visualización. Esta integración permite realizar análisis más profundos y generar representaciones gráficas claras y comprensibles, fundamentales para la comunicación de resultados en entornos académicos y profesionales.

\section*{Metodología}

Tras la exploración del estado de las herramientas actuales, se definió una metodología basada en programación en Python, apoyada por bibliotecas como \textbf{OSMnx}, \textbf{NetworkX} y \textbf{OR-Tools}, con el objetivo de construir una solución robusta y escalable para la optimización de rutas de entrega en entornos urbanos. 
El proceso inicia con una lista de direcciones o puntos de interés definidos por el usuario. Mediante la función \texttt{geocode()} de \textbf{OSMnx}, dichas ubicaciones se traducen a coordenadas geográficas (latitud y longitud), lo cual permite representar espacialmente los puntos de entrega sobre el mapa urbano real.

Con las coordenadas obtenidas, se genera un grafo de calles mediante el método \texttt{graph\_from\_bbox()}, también proporcionada por \textbf{OSMnx}. Este grafo representa la red vial real, donde los nodos corresponden a intersecciones y las aristas a segmentos de calles. La generación se limita a una zona geográfica delimitada por un \textit{bounding box} alrededor de los puntos ingresados.

Para realizar una estimación de las distancias, se da uso de la librería \textbf{NetworkX}, con esto se determinan las distancias más cortas entre todos los pares de puntos. Para ello se emplea el algoritmo de Dijkstra, que toma en cuenta la longitud real de las calles y construye una matriz de distancias expresadas en kilómetros. Este paso es muy importante para alimentar el modelo de optimización con datos reales del entorno vial.

Con la matriz de distancias como entrada, se formula un problema del Viajante de Comercio (TSP) utilizando el módulo \textbf{OR-Tools} de Google. A través del \texttt{Routing Solver}, se construye un modelo con un único vehículo que parte de un nodo base y debe visitar todos los puntos exactamente una vez, minimizando la distancia total recorrida. La estrategia utilizada es \textit{Path Cheapest Arc}, una heurística eficiente para soluciones iniciales.

Para temas de visualización y salida, el sistema genera la secuencia óptima de visitas, así como también el recorrido total en kilómetros y una visualización opcional con librerías como \texttt{Folium} para representar el mapa y la ruta.


Con estos métodos se permite integrar datos del mundo real con herramientas de optimización combinatoria para generar soluciones aplicables a contextos urbanos reales, tal como se ha propuesto en investigaciones recientes \cite{munoz2024, google2023, castro2022, boeing2025, hagberg2008}.


\newpage
\bibliographystyle{apalike} 
\bibliography{referencias}  

\end{document}

